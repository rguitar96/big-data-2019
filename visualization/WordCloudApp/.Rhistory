AICc(Arima(housing_ts,order=c(6,1,0))),
AICc(Arima(housing_ts,order=c(6,1,1))),
AICc(Arima(housing_ts,order=c(6,1,2))),
AICc(Arima(housing_ts,order=c(6,1,3))),
AICc(Arima(housing_ts,order=c(6,1,4))),
AICc(Arima(housing_ts,order=c(6,1,5))),
AICc(Arima(housing_ts,order=c(6,1,6))),
AICc(Arima(housing_ts,order=c(6,1,7))),
AICc(Arima(housing_ts,order=c(6,1,8))),
AICc(Arima(housing_ts,order=c(6,1,9))),
AICc(Arima(housing_ts,order=c(6,1,10))),
AICc(Arima(housing_ts,order=c(6,1,11))),
AICc(Arima(housing_ts,order=c(6,1,12))),
AICc(Arima(housing_ts,order=c(7,1,0))),
AICc(Arima(housing_ts,order=c(7,1,1))),
AICc(Arima(housing_ts,order=c(7,1,2))),
AICc(Arima(housing_ts,order=c(7,1,3))),
AICc(Arima(housing_ts,order=c(7,1,4))),
AICc(Arima(housing_ts,order=c(7,1,5))),
AICc(Arima(housing_ts,order=c(7,1,6))),
AICc(Arima(housing_ts,order=c(7,1,7))),
AICc(Arima(housing_ts,order=c(7,1,8))),
AICc(Arima(housing_ts,order=c(7,1,9))),
AICc(Arima(housing_ts,order=c(7,1,10))),
AICc(Arima(housing_ts,order=c(7,1,11))),
AICc(Arima(housing_ts,order=c(7,1,12))),
AICc(Arima(housing_ts,order=c(8,1,0))),
AICc(Arima(housing_ts,order=c(8,1,1))),
AICc(Arima(housing_ts,order=c(8,1,2))),
AICc(Arima(housing_ts,order=c(8,1,3))),
AICc(Arima(housing_ts,order=c(8,1,4))),
AICc(Arima(housing_ts,order=c(8,1,5))),
AICc(Arima(housing_ts,order=c(8,1,6))),
AICc(Arima(housing_ts,order=c(8,1,7))),
AICc(Arima(housing_ts,order=c(8,1,8))),
AICc(Arima(housing_ts,order=c(8,1,9))),
AICc(Arima(housing_ts,order=c(8,1,10))),
AICc(Arima(housing_ts,order=c(8,1,11))),
AICc(Arima(housing_ts,order=c(8,1,12))),
AICc(Arima(housing_ts,order=c(9,1,0))),
AICc(Arima(housing_ts,order=c(9,1,1))),
AICc(Arima(housing_ts,order=c(9,1,2))),
AICc(Arima(housing_ts,order=c(9,1,3))),
AICc(Arima(housing_ts,order=c(9,1,4))),
AICc(Arima(housing_ts,order=c(9,1,5))),
AICc(Arima(housing_ts,order=c(9,1,6))),
AICc(Arima(housing_ts,order=c(9,1,7))),
AICc(Arima(housing_ts,order=c(9,1,8))),
AICc(Arima(housing_ts,order=c(9,1,9))),
AICc(Arima(housing_ts,order=c(9,1,10))),
AICc(Arima(housing_ts,order=c(9,1,11))),
AICc(Arima(housing_ts,order=c(9,1,12))),
AICc(Arima(housing_ts,order=c(10,1,0))),
AICc(Arima(housing_ts,order=c(10,1,1))),
AICc(Arima(housing_ts,order=c(10,1,2))),
AICc(Arima(housing_ts,order=c(10,1,3))),
AICc(Arima(housing_ts,order=c(10,1,4))),
AICc(Arima(housing_ts,order=c(10,1,5))),
AICc(Arima(housing_ts,order=c(10,1,6))),
AICc(Arima(housing_ts,order=c(10,1,7))),
AICc(Arima(housing_ts,order=c(10,1,8))),
AICc(Arima(housing_ts,order=c(10,1,9))),
AICc(Arima(housing_ts,order=c(10,1,10))),
AICc(Arima(housing_ts,order=c(10,1,11))),
AICc(Arima(housing_ts,order=c(10,1,12))),
AICc(Arima(housing_ts,order=c(11,1,0))),
AICc(Arima(housing_ts,order=c(11,1,1))),
AICc(Arima(housing_ts,order=c(11,1,2))),
AICc(Arima(housing_ts,order=c(11,1,3))),
AICc(Arima(housing_ts,order=c(11,1,4))),
AICc(Arima(housing_ts,order=c(11,1,5))),
AICc(Arima(housing_ts,order=c(11,1,6))),
AICc(Arima(housing_ts,order=c(11,1,7))),
AICc(Arima(housing_ts,order=c(11,1,8))),
AICc(Arima(housing_ts,order=c(11,1,9))),
AICc(Arima(housing_ts,order=c(11,1,10))),
AICc(Arima(housing_ts,order=c(11,1,11))),
AICc(Arima(housing_ts,order=c(11,1,12))),
AICc(Arima(housing_ts,order=c(12,1,0))),
AICc(Arima(housing_ts,order=c(12,1,1))),
AICc(Arima(housing_ts,order=c(12,1,2))),
AICc(Arima(housing_ts,order=c(12,1,3))),
AICc(Arima(housing_ts,order=c(12,1,4))),
AICc(Arima(housing_ts,order=c(12,1,5))),
AICc(Arima(housing_ts,order=c(12,1,6))),
AICc(Arima(housing_ts,order=c(12,1,7))),
AICc(Arima(housing_ts,order=c(12,1,8))),
AICc(Arima(housing_ts,order=c(12,1,9))),
AICc(Arima(housing_ts,order=c(12,1,10))),
AICc(Arima(housing_ts,order=c(12,1,11))),
AICc(Arima(housing_ts,order=c(12,1,12)))
)
models.2
minAICc = min(models.2)
match(minAICc, models.2)
models.2
minAICc
match(minAICc, models.2)
t =  c(Arima(housing_ts,order=c(0,1,0)),
Arima(housing_ts,order=c(0,1,1)),
Arima(housing_ts,order=c(0,1,2)))
t
t[1]
t[[1]]
Arima(housing_ts,order=c(0,1,0)
)
AIcc(t)
AICc(t)
AICc(t[1])
models
models.2
models.2[13]
#Final model 1
#Final model 3
final.model<- Arima(housing_ts,order=c(0,1,12))
summary(final.model)
print("")
print("")
final.model.mean = mean(final.model$residuals)
print(paste0("Residual Mean: ", final.model.mean))
print("")
print("")
cov2cor(final.model$var.coef)
print("")
print("")
jarque.bera.test(final.model$residuals)
plot(final.model$residuals)
tsdiag(final.model)
models.1[13]
models.2[13]
models.2[26]
plot(d.test)
plot(diff(housing_ts))
plot(diff(diff(housing_ts)))
plot(diff(diff(diff(housing_ts))))
plot(diff(log(housing_ts))
)
#Final decomposition
stl.housing <- stl(housing_ts, t.window=5, s.window="periodic", robust=TRUE)
models.1 = c(#d and D
AICc(Arima(housing_ts,order=c(0,0,0))),
AICc(Arima(housing_ts,order=c(0,1,0))), #Best: d=1, D=0
AICc(Arima(housing_ts,order=c(0,0,0))),
AICc(Arima(housing_ts,order=c(0,1,0)))
)
models.1
min(models.1)
models.2 = c(#p and q
AICc(Arima(housing_ts,order=c(0,1,0))),
AICc(Arima(housing_ts,order=c(0,1,1))),
AICc(Arima(housing_ts,order=c(0,1,2))),
AICc(Arima(housing_ts,order=c(0,1,3))),
AICc(Arima(housing_ts,order=c(0,1,4))),
AICc(Arima(housing_ts,order=c(0,1,5))),
AICc(Arima(housing_ts,order=c(0,1,6))),
AICc(Arima(housing_ts,order=c(0,1,7))),
AICc(Arima(housing_ts,order=c(0,1,8))),
AICc(Arima(housing_ts,order=c(0,1,9))),
AICc(Arima(housing_ts,order=c(0,1,10))),
AICc(Arima(housing_ts,order=c(0,1,11))),
AICc(Arima(housing_ts,order=c(0,1,12))),
AICc(Arima(housing_ts,order=c(1,1,0))),
AICc(Arima(housing_ts,order=c(1,1,1))),
AICc(Arima(housing_ts,order=c(1,1,2))),
AICc(Arima(housing_ts,order=c(1,1,3))),
AICc(Arima(housing_ts,order=c(1,1,4))),
AICc(Arima(housing_ts,order=c(1,1,5))),
AICc(Arima(housing_ts,order=c(1,1,6))),
AICc(Arima(housing_ts,order=c(1,1,7))),
AICc(Arima(housing_ts,order=c(1,1,8))),
AICc(Arima(housing_ts,order=c(1,1,9))),
AICc(Arima(housing_ts,order=c(1,1,10))),
AICc(Arima(housing_ts,order=c(1,1,11))),
AICc(Arima(housing_ts,order=c(1,1,12))),
AICc(Arima(housing_ts,order=c(2,1,0))),
AICc(Arima(housing_ts,order=c(2,1,1))),
AICc(Arima(housing_ts,order=c(2,1,2))),
AICc(Arima(housing_ts,order=c(2,1,3))),
AICc(Arima(housing_ts,order=c(2,1,4))),
AICc(Arima(housing_ts,order=c(2,1,5))),
AICc(Arima(housing_ts,order=c(2,1,6))),
AICc(Arima(housing_ts,order=c(2,1,7))),
AICc(Arima(housing_ts,order=c(2,1,8))),
AICc(Arima(housing_ts,order=c(2,1,9))),
AICc(Arima(housing_ts,order=c(2,1,10))),
AICc(Arima(housing_ts,order=c(2,1,11))),
AICc(Arima(housing_ts,order=c(2,1,12))),
AICc(Arima(housing_ts,order=c(3,1,0))),
AICc(Arima(housing_ts,order=c(3,1,1))),
AICc(Arima(housing_ts,order=c(3,1,2))),
AICc(Arima(housing_ts,order=c(3,1,3))), #Best: p=q=3
AICc(Arima(housing_ts,order=c(3,1,4))),
AICc(Arima(housing_ts,order=c(3,1,5))),
AICc(Arima(housing_ts,order=c(3,1,6))),
AICc(Arima(housing_ts,order=c(3,1,7))),
AICc(Arima(housing_ts,order=c(3,1,8))),
AICc(Arima(housing_ts,order=c(3,1,9))),
AICc(Arima(housing_ts,order=c(3,1,10))),
AICc(Arima(housing_ts,order=c(3,1,11))),
AICc(Arima(housing_ts,order=c(3,1,12))),
AICc(Arima(housing_ts,order=c(4,1,0))),
AICc(Arima(housing_ts,order=c(4,1,1))),
AICc(Arima(housing_ts,order=c(4,1,2))),
AICc(Arima(housing_ts,order=c(4,1,3))),
AICc(Arima(housing_ts,order=c(4,1,4))),
AICc(Arima(housing_ts,order=c(4,1,5))),
AICc(Arima(housing_ts,order=c(4,1,6))),
AICc(Arima(housing_ts,order=c(4,1,7))),
AICc(Arima(housing_ts,order=c(4,1,8))),
AICc(Arima(housing_ts,order=c(4,1,9))),
AICc(Arima(housing_ts,order=c(4,1,10))),
AICc(Arima(housing_ts,order=c(4,1,11))),
AICc(Arima(housing_ts,order=c(4,1,12))),
AICc(Arima(housing_ts,order=c(5,1,0))),
AICc(Arima(housing_ts,order=c(5,1,1))),
AICc(Arima(housing_ts,order=c(5,1,2))),
AICc(Arima(housing_ts,order=c(5,1,3))),
AICc(Arima(housing_ts,order=c(5,1,4))),
AICc(Arima(housing_ts,order=c(5,1,5))),
AICc(Arima(housing_ts,order=c(5,1,6))),
AICc(Arima(housing_ts,order=c(5,1,7))),
AICc(Arima(housing_ts,order=c(5,1,8))),
AICc(Arima(housing_ts,order=c(5,1,9))),
AICc(Arima(housing_ts,order=c(5,1,10))),
AICc(Arima(housing_ts,order=c(5,1,11))),
AICc(Arima(housing_ts,order=c(5,1,12))),
AICc(Arima(housing_ts,order=c(6,1,0))),
AICc(Arima(housing_ts,order=c(6,1,1))),
AICc(Arima(housing_ts,order=c(6,1,2))),
AICc(Arima(housing_ts,order=c(6,1,3))),
AICc(Arima(housing_ts,order=c(6,1,4))),
AICc(Arima(housing_ts,order=c(6,1,5))),
AICc(Arima(housing_ts,order=c(6,1,6))),
AICc(Arima(housing_ts,order=c(6,1,7))),
AICc(Arima(housing_ts,order=c(6,1,8))),
AICc(Arima(housing_ts,order=c(6,1,9))),
AICc(Arima(housing_ts,order=c(6,1,10))),
AICc(Arima(housing_ts,order=c(6,1,11))),
AICc(Arima(housing_ts,order=c(6,1,12))),
AICc(Arima(housing_ts,order=c(7,1,0))),
AICc(Arima(housing_ts,order=c(7,1,1))),
AICc(Arima(housing_ts,order=c(7,1,2))),
AICc(Arima(housing_ts,order=c(7,1,3))),
AICc(Arima(housing_ts,order=c(7,1,4))),
AICc(Arima(housing_ts,order=c(7,1,5))),
AICc(Arima(housing_ts,order=c(7,1,6))),
AICc(Arima(housing_ts,order=c(7,1,7))),
AICc(Arima(housing_ts,order=c(7,1,8))),
AICc(Arima(housing_ts,order=c(7,1,9))),
AICc(Arima(housing_ts,order=c(7,1,10))),
AICc(Arima(housing_ts,order=c(7,1,11))),
AICc(Arima(housing_ts,order=c(7,1,12))),
AICc(Arima(housing_ts,order=c(8,1,0))),
AICc(Arima(housing_ts,order=c(8,1,1))),
AICc(Arima(housing_ts,order=c(8,1,2))),
AICc(Arima(housing_ts,order=c(8,1,3))),
AICc(Arima(housing_ts,order=c(8,1,4))),
AICc(Arima(housing_ts,order=c(8,1,5))),
AICc(Arima(housing_ts,order=c(8,1,6))),
AICc(Arima(housing_ts,order=c(8,1,7))),
AICc(Arima(housing_ts,order=c(8,1,8))),
AICc(Arima(housing_ts,order=c(8,1,9))),
AICc(Arima(housing_ts,order=c(8,1,10))),
AICc(Arima(housing_ts,order=c(8,1,11))),
AICc(Arima(housing_ts,order=c(8,1,12))),
AICc(Arima(housing_ts,order=c(9,1,0))),
AICc(Arima(housing_ts,order=c(9,1,1))),
AICc(Arima(housing_ts,order=c(9,1,2))),
AICc(Arima(housing_ts,order=c(9,1,3))),
AICc(Arima(housing_ts,order=c(9,1,4))),
AICc(Arima(housing_ts,order=c(9,1,5))),
AICc(Arima(housing_ts,order=c(9,1,6))),
AICc(Arima(housing_ts,order=c(9,1,7))),
AICc(Arima(housing_ts,order=c(9,1,8))),
AICc(Arima(housing_ts,order=c(9,1,9))),
AICc(Arima(housing_ts,order=c(9,1,10))),
AICc(Arima(housing_ts,order=c(9,1,11))),
AICc(Arima(housing_ts,order=c(9,1,12))),
AICc(Arima(housing_ts,order=c(10,1,0))),
AICc(Arima(housing_ts,order=c(10,1,1))),
AICc(Arima(housing_ts,order=c(10,1,2))),
AICc(Arima(housing_ts,order=c(10,1,3))),
AICc(Arima(housing_ts,order=c(10,1,4))),
AICc(Arima(housing_ts,order=c(10,1,5))),
AICc(Arima(housing_ts,order=c(10,1,6))),
AICc(Arima(housing_ts,order=c(10,1,7))),
AICc(Arima(housing_ts,order=c(10,1,8))),
AICc(Arima(housing_ts,order=c(10,1,9))),
AICc(Arima(housing_ts,order=c(10,1,10))),
AICc(Arima(housing_ts,order=c(10,1,11))),
AICc(Arima(housing_ts,order=c(10,1,12))),
AICc(Arima(housing_ts,order=c(11,1,0))),
AICc(Arima(housing_ts,order=c(11,1,1))),
AICc(Arima(housing_ts,order=c(11,1,2))),
AICc(Arima(housing_ts,order=c(11,1,3))),
AICc(Arima(housing_ts,order=c(11,1,4))),
AICc(Arima(housing_ts,order=c(11,1,5))),
AICc(Arima(housing_ts,order=c(11,1,6))),
AICc(Arima(housing_ts,order=c(11,1,7))),
AICc(Arima(housing_ts,order=c(11,1,8))),
AICc(Arima(housing_ts,order=c(11,1,9))),
AICc(Arima(housing_ts,order=c(11,1,10))),
AICc(Arima(housing_ts,order=c(11,1,11))),
AICc(Arima(housing_ts,order=c(11,1,12))),
AICc(Arima(housing_ts,order=c(12,1,0))),
AICc(Arima(housing_ts,order=c(12,1,1))),
AICc(Arima(housing_ts,order=c(12,1,2))),
AICc(Arima(housing_ts,order=c(12,1,3))),
AICc(Arima(housing_ts,order=c(12,1,4))),
AICc(Arima(housing_ts,order=c(12,1,5))),
AICc(Arima(housing_ts,order=c(12,1,6))),
AICc(Arima(housing_ts,order=c(12,1,7))),
AICc(Arima(housing_ts,order=c(12,1,8))),
AICc(Arima(housing_ts,order=c(12,1,9))),
AICc(Arima(housing_ts,order=c(12,1,10))),
AICc(Arima(housing_ts,order=c(12,1,11))),
AICc(Arima(housing_ts,order=c(12,1,12)))
)
models.2
minAICc = min(models.2)
match(minAICc, models.2)
#Final model 1
#Final model 3
final.model<- Arima(housing_ts,order=c(0,1,12))
summary(final.model)
print("")
print("")
final.model.mean = mean(final.model$residuals)
print(paste0("Residual Mean: ", final.model.mean))
print("")
print("")
cov2cor(final.model$var.coef)
print("")
print("")
jarque.bera.test(final.model$residuals)
plot(final.model$residuals)
tsdiag(final.model)
final.model2 = Arima(housing_ts, order = c(1,1,12))
summary(final.model2)
print("")
print("")
final.model2.mean = mean(final.model2$residuals)
print(paste0("Residual Mean: ", final.model2.mean))
print("")
print("")
cov2cor(final.model2$var.coef)
print("")
print("")
jarque.bera.test(final.model2$residuals)
plot(final.model2$residuals)
tsdiag(final.model2)
#arima
fcst.fm=forecast(final.model, h=24)
plot(fcst.fm) #There is a problem with the data shape: it looks like residuals!
fcst.fm2=forecast(final.model2, h=24)
plot(fcst.fm2)
#Arminda's method
getrmse <- function(x,h,...)
{
train.end <- time(x)[length(x)-h]   #train data end
test.start <- time(x)[length(x)-h+1]  #test data start
train <- window(x,end=train.end) #extract train data
test <- window(x,start=test.start)  #extract test data
fit <- Arima(train,...) # fit model with train data
fc <- forecast(fit,h=h) # forecast with model
return(accuracy(fc,test)[2,"RMSE"]) #compare forecast with test data, extract the rmse
}
#Final model 1 (best results but it is using different data!)
getrmse(housing_ts,h=12,order=c(0,1,12))
#Final model 2
getrmse(housing_ts,h=12,order=c(1,1,12))
auto.model <- auto.arima(d.ts,
seasonal= FALSE,
max.order = 24,
max.p = 14,
max.q = 14
)
summary(auto.model)
print("")
print("")
auto.model.mean = mean(auto.model$residuals)
print(paste0("Residual Mean: ", auto.model.mean))
print("")
print("")
cov2cor(auto.model$var.coef)
print("")
print("")
jarque.bera.test(auto.model$residuals)
plot(auto.model$residuals)
tsdiag(auto.model)
tsdisplay(residuals(auto.model), lag.max=15, main='Automatic Model Residuals')
tsdisplay(residuals(final.model), lag.max=15, main='Final Model 1 Residuals')
tsdisplay(residuals(final.model2), lag.max=15, main='Final Model 2 Residuals')
library(shiny)
library(tm)
library(wordcloud)
library(wordcloud2)
library(memoise)
library(dplyr)
library(tidyverse)
languages = data.frame(
name = c("Spanish",
"English",
"Portuguese",
"Danish",
"French",
"Italian",
"German",
"Turkish",
"Dutch",
"Hungarian",
"Finnish",
"Russian",
"Swedish"),
code = c("es",
"en",
"pt",
"da",
"fr",
"it",
"de",
"tr",
"nl",
"hu",
"fi",
"ru",
"sv"))
data <- read.csv("../data/clean-twitter-data.csv", fileEncoding = "latin1")
setwd("~/big-data-2019/visualization/WordCloudApp")
data <- read.csv("../data/clean-twitter-data.csv", fileEncoding = "latin1")
data$Date <- as.Date(data$Date)
data$HashTags = regmatches(data$Tweet.content, gregexpr("#(\\d|\\w)+", data$Tweet.content))
View(data)
View(data)
data$HashTags = str_extract_all(data$Tweet.content, "#\\S+")
data <- read.csv("../data/clean-twitter-data.csv", fileEncoding = "latin1")
data$Date <- as.Date(data$Date)
data$HashTags = str_extract_all(data$Tweet.content, "#\\S+")
View(data)
View(data)
data$HashTags[[1]]
data$HashTags[1]
data %>% select(HashTags[[1]])
data$HashTags[[1]]
data %>% select(HashTags)
data %>% select(HashTags[1])
data %>% select(data$HashTags[1])
data %>% select(HashTags[[1]])
data %>% select(HashTags)
is_empty(data$HashTags)
is_empty(data$HashTags[1])
is_empty(data$HashTags[[1])
is_empty(data$HashTags[[1]])
data %>% filter(is_empty(data$HashTags[1]))
data %>% filter(!is_empty(data$HashTags[1]))
data %>% filter(!is_empty(data$HashTags[[1]]))
data %>% filter(!is_empty(data$HashTags))
regmatches(data$Tweet.content, gregexpr("#(\\d|\\w)+", data$Tweet.content))
regmatches(data$Tweet.content, gregexpr("#(\\d|\\w)+", data$Tweet.content))[1]
unlist(data$HashTags, recursive = FALSE)
unlist(data$HashTags, recursive = FALSE)
unlist(data$HashTags, recursive = FALSE)[1]
data$HashTags = regmatches(data$Tweet.content, gregexpr("#(\\d|\\w)+", data$Tweet.content))
lang = languages %>% filter(name == langName)
langName = "Spanish"
startDate = "2016-04-14"
endDate = "2016-04-14"
lang = languages %>% filter(name == langName)
text = unlist(data %>%
filter(Tweet.language..ISO.639.1. == lang$code) %>%
filter(Date >= startDate) %>%
filter(Date <= endDate) %>%
select(HashTags), recursive = FALSE)
View(text)
View(text)
docs = Corpus(VectorSource(text$HashTags))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs = Corpus(VectorSource(text))
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove language common stopwords
docs <- tm_map(docs, removeWords, stopwords(tolower(lang$name)))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("https", "tco", "...", "com"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
wordcloud2(d, size = 0.7, shape = 'pentagon')
View(d)
View(d)
View(docs)
View(docs)
text[1]
text[2]
is_empty(text[1])
is_empty(text[[1]])
is_empty(text[[2]])
length(text[[1]])
length(text[[3]])
length(text[[2]])
