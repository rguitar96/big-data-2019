println("Hello, World!")

//Load the data
println("Let's read the data!")
val df = spark.read.format("csv").option("header", "true").load("C:/Users/Mariano/Google Drive/eit-health/semestre-1/big-data/practice/big-data-2019/spark/data/1997.csv")
println("These are the fields:")
df.schema.fields.foreach(x => println(x))
println("This is how the rows look like:")
df.take(10).foreach(println(_))

//Remove forbidden variables
println("Let's remove now the columns that can not be used for the prediction model!")
val dfAfterDrop=df.drop("ArrTime").drop("ActualElapsedTime").drop("AirTime").drop("TaxiIn").drop("Diverted").drop("CarrierDelay").drop("WeatherDelay").drop("NASDelay").drop("SecurityDelay").drop("LateAircraftDelay")
val df = dfAfterDrop
df.schema.fields.foreach(x => println(x))

//Data exploration
println("Let's see the summary statistics of the data!")
/*df.describe().show()
+-------+--------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------+------------------+-------+-----------------+-----------------+------------------+-------+-------+-----------------+------------------+--------------------+----------------+
|summary|                Year|             Month|        DayofMonth|         DayOfWeek|           DepTime|        CRSDepTime|        CRSArrTime|UniqueCarrier|         FlightNum|TailNum|   CRSElapsedTime|         ArrDelay|          DepDelay| Origin|   Dest|         Distance|           TaxiOut|           Cancelled|CancellationCode|
+-------+--------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------+------------------+-------+-----------------+-----------------+------------------+-------+-------+-----------------+------------------+--------------------+----------------+
|  count|             5411843|           5411843|           5411843|           5411843|           5411843|           5411843|           5411843|      5411843|           5411843|5411843|          5411843|          5411843|           5411843|5411843|5411843|          5411843|           5411843|             5411843|         5411843|
|   mean|              1997.0| 6.507437300010366|15.701053596713725|3.9429142715337457| 1353.357251866739|1316.6359144195426|1469.1457420327974|         null|1019.7069780110029|  112.0|121.8330834101166|7.490578364877097|   8.2355660810526|   null|   null|724.2045809532908|14.100871736301293|0.018064640825685447|            null|
| stddev|1.578973547332153...|3.4351784271870316| 8.780957893301238|1.9894932060182025|479.51889458433504|505.15664562171656| 526.9678096819895|         null| 686.0529125230296|    0.0|67.67257727193673|28.21280079724604|28.471116766907798|   null|   null|546.0275246019438| 9.302605721354618|  0.1331852576496684|            null|
|    min|                1997|                 1|                 1|                 1|                 1|                 0|                 0|           AA|                 1|    112|              -38|               -1|                -1|    ABE|    ABE|              100|                 0|                   0|              NA|
|    max|                1997|                 9|                 9|                 7|                NA|               959|               959|           WN|               999| UNKNOW|               NA|               NA|                NA|    YAK|    YAK|              999|                99|                   1|              NA|
+-------+--------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------+------------------+-------+-----------------+-----------------+------------------+-------+-------+-----------------+------------------+--------------------+----------------+
*/
println("We have several NAs values :( . But how many?")
df.groupBy("Year").count().show()
df.filter(df("Year") === "NA").count()
/*
+----+-------+
|Year|  count|
+----+-------+
|1997|5411843|
+----+-------+
0
*/

df.groupBy("Month").count().show()
df.filter(df("Month") === "NA").count()
/*
+-----+------+
|Month| count|
+-----+------+
|    7|466771|
|   11|432725|
|    3|460986|
|    8|466608|
|    5|457361|
|    6|450737|
|    9|444431|
|    1|459123|
|   10|459247|
|    4|447294|
|   12|450904|
|    2|415656|
+-----+------+
0
*/
df.groupBy("DayOfMonth").count().show()
df.filter(df("DayOfMonth") === "NA").count()
*/
+----------+------+
|DayOfMonth| count|
+----------+------+
|         7|179566|
|        15|176837|
|        11|178516|
|        29|163403|
|         3|180473|
|        30|164142|
|         8|176772|
|        28|176625|
|        22|177051|
|        16|179038|
|         5|177456|
|        31|101077|
|        18|178118|
|        27|174093|
|        17|180380|
|        26|176717|
|         6|177768|
|        19|178326|
|        23|179087|
|        25|174754|
+----------+------+
only showing top 20 rows
0
*/
df.groupBy("DayOfWeek").count().show()
df.filter(df("DayOfWeek") === "NA").count()
/*
+---------+------+
|DayOfWeek| count|
+---------+------+
|        7|749527|
|        3|802130|
|        5|786342|
|        6|706198|
|        1|790298|
|        4|785731|
|        2|791617|
+---------+------+
0
*/
df.groupBy("DepTime").count().show()
df.filter(df("DepTime") === "NA").count()
/*
+-------+-----+
|DepTime|count|
+-------+-----+
|   1159| 6085|
|   2136| 2347|
|    829| 6398|
|   1436| 3985|
|   1512| 4628|
|    800|15932|
|    853| 4586|
|    944| 4062|
|   2110| 5040|
|    125|  343|
|    451|    1|
|    919| 4435|
|   1808| 4529|
|   1241| 4333|
|   1746| 4063|
|    926| 5416|
|   1528| 5555|
|   1953| 3100|
|   1903| 5252|
|   2034| 4022|
+-------+-----+
only showing top 20 rows
97763
*/
df.groupBy("CRSDepTime").count().show()
df.filter(df("CRSDepTime") === "NA").count()
/*
+----------+-----+
|CRSDepTime|count|
+----------+-----+
|      1512|  414|
|      1159|  780|
|       829|  976|
|      1436|  543|
|      2136|  184|
|       800|53810|
|      2110|11709|
|       944|  672|
|       125|  922|
|       853|  323|
|       926| 1053|
|      1808|  600|
|      1746|  506|
|       919| 1181|
|      1241| 1247|
|      1903|  204|
|      2034|  417|
|      1953|  471|
|      1528| 1253|
|         7|    2|
+----------+-----+
0
*/
df.groupBy("CRSArrTime").count().show()
df.filter(df("CRSArrTime") === "NA").count()
/*
+----------+-----+
|CRSArrTime|count|
+----------+-----+
|      2136| 5011|
|       829| 2776|
|      1512| 4319|
|      1436| 3778|
|      1159| 3977|
|      2110| 9578|
|       944| 3434|
|       853| 4547|
|       800| 7050|
|       125|  248|
|       451|  102|
|      1241| 3753|
|      1808| 5647|
|       919| 3078|
|       926| 3138|
|      1746| 6261|
|      2034| 5567|
|      1903| 3893|
|      1953| 4040|
|      1528| 4563|
+----------+-----+
only showing top 20 rows
0
*/
df.groupBy("UniqueCarrier").count().show()
df.filter(df("UniqueCarrier") === "NA").count()
/*
+-------------+------+
|UniqueCarrier| count|
+-------------+------+
|           UA|743847|
|           AA|663954|
|           NW|537152|
|           HP|206304|
|           TW|274037|
|           DL|921850|
|           US|718751|
|           AS|147750|
|           CO|403349|
|           WN|794849|
+-------------+------+
0
*/
df.groupBy("FlightNum").count().show()
df.filter(df("FlightNum") === "NA").count()
/*
+---------+-----+
|FlightNum|count|
+---------+-----+
|     1159| 3463|
|      829| 2520|
|     2294|  674|
|     2136| 1614|
|      691| 2323|
|      675| 3294|
|     1436| 2117|
|     1090| 3059|
|      467| 3677|
|     2069|  889|
|     2162| 1039|
|      296| 2610|
|     1512| 1783|
|     1572| 2019|
|     2088| 1189|
|     2904|    5|
|     2275|  794|
|      800| 1069|
|      853| 2811|
|      125| 2332|
+---------+-----+
only showing top 20 rows
0
*/
df.groupBy("TailNum").count().show()
df.filter(df("TailNum") === "NA").count()
/*
+-------+-----+
|TailNum|count|
+-------+-----+
| N411US| 1794|
| N516UA| 1269|
| N513UA| 1262|
| N407AA| 1290|
| N502US| 1378|
| N919UA| 2117|
| N567AA| 1234|
| N912TW| 1457|
| N54345| 1515|
| N385US| 1707|
| N240AU| 1770|
| N33637| 1524|
| N8934E| 1843|
| N607NW| 1912|
| N902DE| 2217|
| N745AS| 2262|
| N499AA| 1300|
| N2CAAA| 1529|
| N201US| 1625|
| N645US|  319|
+-------+-----+
only showing top 20 rows
0
*/
df.groupBy("CRSElapsedTime").count().show()
df.filter(df("CRSElapsedTime") === "NA").count()
/*
+--------------+-----+
|CRSElapsedTime|count|
+--------------+-----+
|           296| 2119|
|           125|35212|
|            51|18354|
|           124|21043|
|             7|    1|
|           307| 2071|
|           475|  359|
|           169|14164|
|           205|11507|
|           334| 1283|
|           272| 3452|
|           470|   80|
|            54|25239|
|           232| 7796|
|           282| 2826|
|           234| 8053|
|           383|  537|
|           448|   13|
|           155|25619|
|           154|21195|
+--------------+-----+
only showing top 20 rows
4849
*/
df.groupBy("ArrDelay").count().show()
df.filter(df("ArrDelay") === "NA").count()
/*
+--------+------+
|ArrDelay| count|
+--------+------+
|      -4|183089|
|     296|    42|
|     467|     4|
|     829|     1|
|     -30|  4055|
|     125|  1080|
|     853|     1|
|     451|     5|
|     870|     1|
|       7|116877|
|      51|  7268|
|     124|  1031|
|     447|     2|
|     475|     7|
|     307|    39|
|     574|     1|
|     718|     1|
|     -71|     2|
|     169|   403|
|     205|   217|
+--------+------+
only showing top 20 rows
109844
*/
df.groupBy("DepDelay").count().show()
df.filter(df("DepDelay") === "NA").count()
/*
+--------+------+
|DepDelay| count|
+--------+------+
|      -4|261753|
|     296|    38|
|     467|     4|
|     829|     1|
|    1436|     1|
|     125|  1198|
|     853|     1|
|     -30|    61|
|     451|     5|
|     944|     1|
|     926|     2|
|     666|     1|
|     919|     1|
|       7| 86889|
|      51|  5566|
|     124|   927|
|     447|     3|
|     307|    28|
|     475|     4|
|     718|     2|
+--------+------+
only showing top 20 rows
97763
*/
df.groupBy("Origin").count().show()
df.filter(df("Origin") === "NA").count()
/*
+------+-----+
|Origin|count|
+------+-----+
|   BGM| 1171|
|   DLG|  417|
|   MSY|47701|
|   GEG|15413|
|   BUR|29115|
|   SNA|35468|
|   GTF| 2461|
|   GRB| 2751|
|   IDA| 1074|
|   GRR| 8888|
|   LWB|   85|
|   EUG| 2276|
|   PSG|  724|
|   GSO|14888|
|   PVD|20462|
|   MYR| 2271|
|   OAK|58734|
|   FAR| 2413|
|   MSN| 4526|
|   SCC|  362|
+------+-----+
0
*/
df.groupBy("Dest").count().show()
df.filter(df("Dest") === "NA").count()
/*
+----+-----+
|Dest|count|
+----+-----+
| BGM| 1170|
| DLG|  417|
| MSY|47703|
| GEG|15413|
| SNA|35412|
| BUR|29115|
| GRB| 2753|
| GTF| 2463|
| IDA| 1073|
| GRR| 8889|
| LWB|   85|
| PSG|  724|
| EUG| 2276|
| PVD|20463|
| MYR| 2271|
| GSO|14890|
| OAK|58738|
| MSN| 4524|
| FAR| 2412|
| SCC|  362|
+----+-----+
only showing top 20 rows
0
*/
df.groupBy("Distance").count().show()
df.filter(df("Distance") === "NA").count()
/*
+--------+-----+
|Distance|count|
+--------+-----+
|    2136| 3410|
|     467| 2918|
|     296|32072|
|     829| 1497|
|    1090| 8331|
|     675| 1870|
|     853| 9795|
|     451| 9767|
|    1372|15471|
|     944| 3494|
|     870| 1476|
|    1870| 1457|
|     919| 8402|
|     926| 2935|
|     666| 1275|
|    1808|   50|
|    1903| 1493|
|     447|18029|
|    1953| 1284|
|    1957| 1488|
+--------+-----+
only showing top 20 rows
0
*/
df.groupBy("TaxiOut").count().show()
df.filter(df("TaxiOut") === "NA").count()
/*
+-------+------+
|TaxiOut| count|
+-------+------+
|    296|     3|
|    125|    79|
|      7|281994|
|     51|  2096|
|    124|    95|
|    307|     2|
|    205|     7|
|    169|    21|
|    334|     1|
|    272|     1|
|     15|280203|
|     54|  1619|
|    232|     9|
|    282|     2|
|    234|     3|
|    155|    32|
|    132|    65|
|    154|    21|
|    317|     1|
|    200|    11|
+-------+------+
only showing top 20 rows
0
*/
df.groupBy("Cancelled").count().show()
df.filter(df("Cancelled") === "NA").count()
/*
+---------+-------+
|Cancelled|  count|
+---------+-------+
|        0|5314080|
|        1|  97763|
+---------+-------+
0
*/
df.groupBy("CancellationCode").count().show()
df.filter(df("CancellationCode") === "NA").count()
/*
 +----------------+-------+
|CancellationCode|  count|
+----------------+-------+
|              NA|5411843|
+----------------+-------+
5411843
*/
 